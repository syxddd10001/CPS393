

HMWK: When the "find" command tries to look in a directory you don't
have permission to read, it prints an error message on stderr
(try this out to see what happens). If you redirect stderr to
stdout, then "find" will print both on stdout and you can pipe all
the output. Use find, pipes, grep and wc to print the *number* of
directories that "find" cannot read in your filesystem.
--
Do the same thing, but have the number written into a file called
num.no.read (using redirection).
--
Repeat the previous question (output to file) but for the entire
filesystem (i.e., start your "find" search at root)--but run the
command in the background, or you will have to wait a long time
for it to finish.
cat the output file every now and then to check find's progress.
If you want to logout before it's done, kill it first.
Delete your output file, since it might take a lot of your disk space.

ANSW:

>  chmod u-r ./a ./d/b/d    #made 2 dirs unreadable by me
>  find . -type d           #trying the find
.
./a
find: `./a': Permission denied
./b
./d
./d/a
./d/b
./d/b/d
find: `./d/b/d': Permission denied
> find . -type d 2>&1 | grep 'Permission denied' | wc -l
> find . -type d 2>/dev/stdout | grep 'Permission denied' | wc -l #same
--
> find . -type d 2>&1 | grep 'Permission denied' | wc -l >num.no.read
--
> find / -type d 2>/dev/stdout | grep 'Permission denied' | wc -l >num.no.read &
[1] 22838      #yours might be different
>
> jobs
[1]+  Running                 find /. -type d 2> /dev/stdout | grep 'Permission denied' | wc -l &
> kill %1
> rm num.no.read


HMWK:
Write a shell program named paTest which expects any number of command
line arguments (CLAs). paTest prompts the user for a list of argument
numbers. It then passes this list to a function named printargs which
prints the values of those argument numbers of paTest. e.g.,
> paTest one two three four five six seven eight
Enter the argument numbers you would like to print: 3 4 7
three
four
seven
>

ANSW:
#!/bin/bash
printargs () {
  #prints various command line arguments of its calling program,
  #where the argument numbers are sent as arguments to printargs
  for i ; do                  
    echo "${A[$(($i-1))]}"
  done
}

A=("$@")         #set array A to be all the positional parameters
                 #didnt line them up just to mess with you
echo -en "Enter the argument numbers you would like to print: "
read args
printargs $args    #eg, if args is "2 4 5" this is: printargs 2 4 5
exit 0

