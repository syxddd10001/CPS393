CPS393 u3Lab

-------------------------------------------------------------------------------
EXAMPLES:

In the following questions, unless the question states otherwise,
assume correct input (file exists, input properly properly, etc.)

Directory testfiles contains (extended versions of) the example files used below. 

PROGRAM NAMES:

Name your shell programs as usual: u3Labqx.sh where x is the 2-digit question number.  
e.g., u3Labq02.sh for question 2.

-------------------------------------------------------------------------------


1. Use the steps below to a program that expects one floating point number on stdin. 
   Program uses sed to print, on stdout, the number represented as the sum of 
   its whole number part and its fractional part, formatted like the examples. 
   e.g.,
   > echo "33.5342" | ./u3Labq01.sh
   33 + 0.5342 = 33.5342
   >
   > echo "0.0" | ./u3Labq01.sh
   0 + 0.0 = 0.0
   > 
   Steps:
   1.1.  Look at the input and expected output: 
         Input:  33.5342
         Output: 33 + 0.5342
         Notice you can change the Input to the Output by simply replacing
         the decimal "." with the string: " + 0."
         Write a sed command to do that. e.g.,
         > echo "33.5342" | sed #the rest of your sed command 
         33 + 0.5342
   1.2.  Put your sed command above into program u3Labq01.sh and test it:
         > echo "33.5342" | ./u3Labq01.sh
         33 + 0.5342

   1.3.  Notice that the you can change the Output above "33 + 0.5342" to the
         required Output "33 + 0.5342 = 33.5342" by appending " = 33.5342". 
         In general, sed can append to a string by replacing the $ (end-of-line). 
         Here is an example of appending ABC: 
         > echo "hi there" | sed -e 's/$/ABC/'
         hi thereABC
         >
         Modify your u3Labq01.sh to append the appropriate string. HOWEVER, your 
         program cannot append a hard-coded string like ABC. It must append the 
         original stdin line itself. Thus, your program must SAVE the original 
         stdin line in a variable first, so you can use the variable in the sed
         command later:
         read line
         echo "${line}" | sed ... ${line} ...

         Your final program requires two sed edits:
            -one for part 1.1 (replacing the .), and
            -one for part 1.3 (appending). 
         You can do these 2 edits in a single sed command (two different -e), 
         OR you can pipe one sed command to another sed command.
    1.4  Test your completed program with various cases, like those shown
         in the original question statement above.

2. Write a shell program  that reads from a file, and writes to stdout.
   Each line of the file contains a number, either integer or floating point.

   If the number is an integer, simply print that integer on stdout. 
   If the number is a float, it is printed on stdout as the sum of its
   whole number part and fractional part (like in the previous question).

   The file is given as the program`s command line argument.
   Output must be like example:
   > cat numberList
   3.0
   3.1415
   42
   33.3333333
   7
   > ./u3Labq02.sh numberList
   3 + 0.0 = 3.0
   3 + 0.1415 = 3.1415
   42
   33 + 0.3333333 = 33.3333333
   7
   > 
   You are free to create your solution program as you wish. 
   However, prof suggests you use iterative refinement as per the following
   Suggested Steps: 
   2.1 copy u3Labq01.sh to u2Labq02.sh and modify...
   2.2 put the sed command inside a while loop so that it is performed 
       for each line of stdin. e.g.,
       > cat floatList 
       3.0
       3.1415
       0.0
       > cat floatList | ./u3Labq02.sh          
       3 + 0.0 = 3.0
       3 + 0.1415 = 3.1415
       0 + 0.0 = 0.0
       >                              
   2.3 send the file (the program's $1) to sed's stdin. e.g.,
       > ./u3Labq02.sh floatList
       3 + 0.0 = 3.0
       3 + 0.1415 = 3.1415
       0 + 0.0 = 0.0
       >
   2.4 put an if-else-statement inside the loop so that the sed command
       is only performed when the line contains a decimal . 
       Else, just echo the line
       Your program should now produce output like that shown in the 
       original question statement above.
   

3. The program below prints the line-count and filename of the file 
   with the most lines in the current directory. e.g,
   > ls -l
    5 xyz
   14 abcd
   31 ef.gh
   10 hijkl
   > ./u3Labq03.sh
   31 ef.gh
   >

   #!/bin/bash
   for i in * ; do
     if [ -f $i ] ; then
        wc -l $i
     fi
   done | sort -n | tail -1
   exit 0

   Copy the code into u3Labq03.sh and modify it so that instead it prints
   the following, where XX is the filename and YY is the line-count.
   File XX has the most lines (YY)
   e.g.,
   > ./u3Labq03.sh
   File ef.gh has the most lines (31)
   >

   There are many ways to do this. One is to pipe the final output
   to a read statement to read the line-count and file-name into
   variables, then include those variables in an appropriate echo 
   statement. This requires a subshell to extend scope of the
   variables to the final echo.
   Another possibility is to use a here-string to assign line-count
   and file-name into variables, then include those variables in
   appropriate echo.
   Another possibility is to assign the final output to one variable.
   Then cut appropriate tokens out of the variable and combine them
   appropriately with echo statements to produce required output.

